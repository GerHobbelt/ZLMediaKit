# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_gen_code.business_logic_pb2 as business__logic__pb2


class bizLogicStub(object):
    """The bizLogic service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterCamera = channel.unary_unary(
                '/bizLogic.bizLogic/RegisterCamera',
                request_serializer=business__logic__pb2.RegisterCameraRequest.SerializeToString,
                response_deserializer=business__logic__pb2.RegisterCameraResponse.FromString,
                )
        self.RegisterAppByCameraUid = channel.unary_unary(
                '/bizLogic.bizLogic/RegisterAppByCameraUid',
                request_serializer=business__logic__pb2.RegisterAppByCameraUidRequest.SerializeToString,
                response_deserializer=business__logic__pb2.RegisterAppByCameraUidResponse.FromString,
                )
        self.GetCameraByUid = channel.unary_unary(
                '/bizLogic.bizLogic/GetCameraByUid',
                request_serializer=business__logic__pb2.GetCameraByUidRequest.SerializeToString,
                response_deserializer=business__logic__pb2.GetCameraResponse.FromString,
                )
        self.GetCameraByGroupAndName = channel.unary_unary(
                '/bizLogic.bizLogic/GetCameraByGroupAndName',
                request_serializer=business__logic__pb2.GetCameraByGroupAndNameRequest.SerializeToString,
                response_deserializer=business__logic__pb2.GetCameraResponse.FromString,
                )
        self.UpdateCameraMetadata = channel.unary_unary(
                '/bizLogic.bizLogic/UpdateCameraMetadata',
                request_serializer=business__logic__pb2.UpdateCameraMetadataRequest.SerializeToString,
                response_deserializer=business__logic__pb2.UpdateCameraMetadataResponse.FromString,
                )
        self.UpdateCameraApp = channel.unary_unary(
                '/bizLogic.bizLogic/UpdateCameraApp',
                request_serializer=business__logic__pb2.UpdateCameraAppRequest.SerializeToString,
                response_deserializer=business__logic__pb2.UpdateCameraAppResponse.FromString,
                )
        self.DeleteCameraByUid = channel.unary_unary(
                '/bizLogic.bizLogic/DeleteCameraByUid',
                request_serializer=business__logic__pb2.DeleteCameraByUidRequest.SerializeToString,
                response_deserializer=business__logic__pb2.DeleteCameraByUidResponse.FromString,
                )
        self.DeleteAppByCameraUid = channel.unary_unary(
                '/bizLogic.bizLogic/DeleteAppByCameraUid',
                request_serializer=business__logic__pb2.DeleteAppByCameraUidRequest.SerializeToString,
                response_deserializer=business__logic__pb2.DeleteAppByCameraUidResponse.FromString,
                )


class bizLogicServicer(object):
    """The bizLogic service definition.
    """

    def RegisterCamera(self, request, context):
        """create a camera svc 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterAppByCameraUid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCameraByUid(self, request, context):
        """get a camera svc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCameraByGroupAndName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCameraMetadata(self, request, context):
        """update a camera svc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCameraApp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCameraByUid(self, request, context):
        """Delete a camera svc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAppByCameraUid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_bizLogicServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterCamera': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterCamera,
                    request_deserializer=business__logic__pb2.RegisterCameraRequest.FromString,
                    response_serializer=business__logic__pb2.RegisterCameraResponse.SerializeToString,
            ),
            'RegisterAppByCameraUid': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAppByCameraUid,
                    request_deserializer=business__logic__pb2.RegisterAppByCameraUidRequest.FromString,
                    response_serializer=business__logic__pb2.RegisterAppByCameraUidResponse.SerializeToString,
            ),
            'GetCameraByUid': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCameraByUid,
                    request_deserializer=business__logic__pb2.GetCameraByUidRequest.FromString,
                    response_serializer=business__logic__pb2.GetCameraResponse.SerializeToString,
            ),
            'GetCameraByGroupAndName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCameraByGroupAndName,
                    request_deserializer=business__logic__pb2.GetCameraByGroupAndNameRequest.FromString,
                    response_serializer=business__logic__pb2.GetCameraResponse.SerializeToString,
            ),
            'UpdateCameraMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCameraMetadata,
                    request_deserializer=business__logic__pb2.UpdateCameraMetadataRequest.FromString,
                    response_serializer=business__logic__pb2.UpdateCameraMetadataResponse.SerializeToString,
            ),
            'UpdateCameraApp': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCameraApp,
                    request_deserializer=business__logic__pb2.UpdateCameraAppRequest.FromString,
                    response_serializer=business__logic__pb2.UpdateCameraAppResponse.SerializeToString,
            ),
            'DeleteCameraByUid': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCameraByUid,
                    request_deserializer=business__logic__pb2.DeleteCameraByUidRequest.FromString,
                    response_serializer=business__logic__pb2.DeleteCameraByUidResponse.SerializeToString,
            ),
            'DeleteAppByCameraUid': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAppByCameraUid,
                    request_deserializer=business__logic__pb2.DeleteAppByCameraUidRequest.FromString,
                    response_serializer=business__logic__pb2.DeleteAppByCameraUidResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bizLogic.bizLogic', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class bizLogic(object):
    """The bizLogic service definition.
    """

    @staticmethod
    def RegisterCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bizLogic.bizLogic/RegisterCamera',
            business__logic__pb2.RegisterCameraRequest.SerializeToString,
            business__logic__pb2.RegisterCameraResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterAppByCameraUid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bizLogic.bizLogic/RegisterAppByCameraUid',
            business__logic__pb2.RegisterAppByCameraUidRequest.SerializeToString,
            business__logic__pb2.RegisterAppByCameraUidResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCameraByUid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bizLogic.bizLogic/GetCameraByUid',
            business__logic__pb2.GetCameraByUidRequest.SerializeToString,
            business__logic__pb2.GetCameraResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCameraByGroupAndName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bizLogic.bizLogic/GetCameraByGroupAndName',
            business__logic__pb2.GetCameraByGroupAndNameRequest.SerializeToString,
            business__logic__pb2.GetCameraResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCameraMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bizLogic.bizLogic/UpdateCameraMetadata',
            business__logic__pb2.UpdateCameraMetadataRequest.SerializeToString,
            business__logic__pb2.UpdateCameraMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCameraApp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bizLogic.bizLogic/UpdateCameraApp',
            business__logic__pb2.UpdateCameraAppRequest.SerializeToString,
            business__logic__pb2.UpdateCameraAppResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCameraByUid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bizLogic.bizLogic/DeleteCameraByUid',
            business__logic__pb2.DeleteCameraByUidRequest.SerializeToString,
            business__logic__pb2.DeleteCameraByUidResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAppByCameraUid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bizLogic.bizLogic/DeleteAppByCameraUid',
            business__logic__pb2.DeleteAppByCameraUidRequest.SerializeToString,
            business__logic__pb2.DeleteAppByCameraUidResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
